name: "Sync mirror"

on:
  workflow_dispatch:
  
jobs:
  SYNC_MIRROR:
    name: sync_mirror
    runs-on: ubuntu-latest
    timeout-minutes: 60 # Set a timeout incase the dependency mirror never completes
    
    steps:
      - name: Setup Github CLI
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Github CLI
        run: sudo apt-get install -y gh

      - name: Authenticate to Github CLI
        run: gh auth login --with-token <<< ${{ secrets.PACKAGES_GITHUB_PAT }}

      - name: Trigger mirror on aravindraveendran-mpl/dependencyrepo
        id: mirror_mobile-league-ios-contract
        run: |
          gh workflow run sync_mirror.yml --ref main --repo aravindraveendran-mpl/dependencyrepo
          echo "Waiting for 10 seconds to allow the workflow to start..."
          sleep 10
          
          run_id=$(gh run list --workflow sync_mirror.yml --repo aravindraveendran-mpl/dependencyrepo --json databaseId --jq '.[0].databaseId')
          echo "Run ID: $run_id"
          echo "run_id=${run_id}" >> $GITHUB_OUTPUT

      - name: Trigger mirror on aravindraveendran-mpl/dependencyrepo
        id: mirror_mobile-league-ios-validic
        run: |
          gh workflow run sync_mirror.yml --ref main --repo aravindraveendran-mpl/dependencyrepo
          echo "Waiting for 10 seconds to allow the workflow to start..."
          sleep 10
          
          run_id=$(gh run list --workflow sync_mirror.yml --repo aravindraveendran-mpl/dependencyrepo --json databaseId --jq '.[0].databaseId')
          echo "Run ID: $run_id"
          echo "run_id=${run_id}" >> $GITHUB_OUTPUT

      - name: Wait for both dependent mirrors to complete
        id: wait_for_dependant_mirrors
        run: |
          # Check if ios-contract is mirrored
          ios-contract-run-id="${{ steps.mirror_mobile-league-ios-contract.outputs.run_id }}"
          while [ "$(gh run view $ios-contract-run-id --repo aravindraveendran-mpl/dependencyrepo --json conclusion --jq '.conclusion')" == "null" ]; do
            echo "Waiting for workflow aravindraveendran-mpl/dependencyrepo to complete..."
            sleep 10
          done
          ios-contract-run-conclusion=$(gh run view $ios-contract-run-id --repo aravindraveendran-mpl/dependencyrepo --json conclusion --jq '.conclusion')
          echo "${mobile-league-ios-contract_run) completed with conclusion: $(ios-contract-run-conclusion)"
          if [ "$ios-contract-run-conclusion" != "success" ]; then
            echo "Workflow failed. Exiting..."
            exit 1
          fi

          # Check if ios-validic is mirrored
          ios-validic-run-id="${{ steps.mirror_mobile-league-ios-validic.outputs.run_id }}"
          while [ "$(gh run view $ios-validic-run-id --repo aravindraveendran-mpl/dependencyrepo --json conclusion --jq '.conclusion')" == "null" ]; do
            echo "Waiting for workflow aravindraveendran-mpl/dependencyrepo to complete..."
            sleep 10
          done
          ios-validic-run-conclusion=$(gh run view $ios-validic-run-id --repo aravindraveendran-mpl/dependencyrepo --json conclusion --jq '.conclusion')
          echo "${ios-validic-run-id} completed with conclusion: $ios-validic-run-conclusion"
          if [ "$ios-validic-run-conclusion" != "success" ]; then
            echo "Waiting for workflow aravindraveendran-mpl/dependencyrepo to complete..."
            exit 1
          fi

