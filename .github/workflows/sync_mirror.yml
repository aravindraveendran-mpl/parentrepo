name: "Sync mirror"

on:
  workflow_dispatch:
  
jobs:
  SYNC_MIRROR:
    name: sync_mirror
    runs-on: ubuntu-latest
    timeout-minutes: 60 # Set a timeout incase the dependency mirror never completes
    
    steps:
      - name: Trigger mirror on aravindraveendran-mpl/dependencyrepo
        id: mirror_mobile-league-ios-contract
        run: |
          response=$(curl -X POST \
            https://api.github.com/repos/aravindraveendran-mpl/dependencyrepo/actions/workflows/sync_mirror.yml/dispatches \
            -H "Authorization: Bearer ${{ secrets.PACKAGES_GITHUB_PAT }}" \
            -d '{"ref":"main"}')

          echo "Response: $response"

          # Extract the run ID from the response
          RUN_ID=$(echo $response | jq -r '.workflow_run.id')
          echo "Run ID: $RUN_ID"

          echo "::set-output name=run_id::$RUN_ID"

      - name: Trigger mirror on aravindraveendran-mpl/dependencyrepo
        id: mirror_mobile-league-ios-validic
        run: |
          response=$(curl -X POST \
            https://api.github.com/repos/aravindraveendran-mpl/dependencyrepo/actions/workflows/sync_mirror.yml/dispatches \
            -H "Authorization: Bearer ${{ secrets.PACKAGES_GITHUB_PAT }}" \
            -d '{"ref":"main"}')

          echo "Response: $response"

          # Extract the run ID from the response
          RUN_ID=$(echo $response | jq -r '.workflow_run.id')
          echo "Run ID: $RUN_ID"

          echo "::set-output name=run_id::$RUN_ID"

      - name: Wait for both dependent mirrors to complete
        id: wait_for_dependant_mirrors
        uses: actions/github-script@v5
        with:
          script: |
            const token = ${{ secrets.PACKAGES_GITHUB_PAT }};

            const checkWorkflowStatus = async (run_id, repo) => {
              let status;
              let conclusion;

              do {
                // Poll the workflow status
                const response = await fetch(
                  `https://api.github.com/repos/${repo}/actions/runs/${run_id}`,
                  {
                    method: 'GET',
                    headers: {
                      'Authorization': `Bearer ${token}`,
                      'Accept': 'application/vnd.github.v3+json'
                    }
                  }
                );
                const data = await response.json();
                status = data.status;
                conclusion = data.conclusion;

                console.log(`Workflow status for ${repo}, ${run_id}: ${status}, and conclusion ${conclusion}`);
                
                // Wait for 30 seconds before checking again
                if (status !== 'completed') {
                  await new Promise(resolve => setTimeout(resolve, 30000));
                }
              } while (status !== 'completed');

              if (conclusion !== 'success') {
                throw new Error('The workflow run on ${repo} failed')
              }
              console.log('Workflow run in ${repo} has completed!');
            };

            const mirror_mobile-league-ios-contract_run_id = '${{ steps.mirror_mobile-league-ios-contract.outputs.run_id }}';
            const mirror_mobile-league-ios-validic_run_id = '${{ steps.mirror_mobile-league-ios-validic.outputs.run_id }}';

            await checkWorkflowStatus(mirror_mobile-league-ios-contract_run_id, 'aravindraveendran-mpl/dependencyrepo');
            await checkWorkflowStatus(mirror_mobile-league-ios-validic_run_id, 'aravindraveendran-mpl/dependencyrepo');