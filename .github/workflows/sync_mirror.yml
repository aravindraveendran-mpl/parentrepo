name: "Sync mirror"

on:
  workflow_dispatch:
  
jobs:
  SYNC_MIRROR:
    name: sync_mirror
    runs-on: ubuntu-latest
    timeout-minutes: 60 # Set a timeout incase the dependency mirror never completes
    
    steps:
      - name: Trigger mirror on aravindraveendran-mpl/dependencyrepo
        id: mirror_mobile-league-ios-contract
        run: |
          gh workflow run sync_mirror.yml --ref main --repo aravindraveendran-mpl/dependencyrepo
          echo "Waiting for 10 seconds to allow the workflow to start..."
          sleep 10

          run_id=$(gh run list --workflow=sync_mirror.yml --branch=main --limit=1 --repo aravindraveendran-mpl/dependencyrepo --json databaseId --jq '.[0].databaseId')
          echo "Run ID: $run_id"

          if [ "${{ steps.get-run-id.outputs.run_id }}" == "null" ]; then
            echo "Run ID is nil. Exiting..."
            exit 1
          else
            echo "::set-output name=run_id::$run_id"
          fi

      - name: Trigger mirror on aravindraveendran-mpl/dependencyrepo
        id: mirror_mobile-league-ios-validic
        run: |
          gh workflow run sync_mirror.yml --ref main --repo aravindraveendran-mpl/dependencyrepo
          echo "Waiting for 10 seconds to allow the workflow to start..."
          sleep 10

          run_id=$(gh run list --workflow=sync_mirror.yml --branch=main --limit=1 --repo aravindraveendran-mpl/dependencyrepo --json databaseId --jq '.[0].databaseId')
          echo "Run ID: $run_id"

          if [ "${{ steps.get-run-id.outputs.run_id }}" == "null" ]; then
            echo "Run ID is nil. Exiting..."
            exit 1
          else
            echo "::set-output name=run_id::$run_id"
          fi

      - name: Wait for both dependent mirrors to complete
        id: wait_for_dependant_mirrors
        run: |
          mobile-league-ios-contract_run_id=${{ steps.mirror_mobile-league-ios-contract.outputs.run_id }}
          while [ "$(gh run view $mobile-league-ios-contract_run_id --repo aravindraveendran-mpl/dependencyrepo --json conclusion --jq '.conclusion')" == "null" ]; do
            echo "Waiting for workflow aravindraveendran-mpl/dependencyrepo to complete..."
            sleep 10
          done
          mobile-league-ios-contract_run_conclusion=$(gh run view $mobile-league-ios-contract_run_id --repo aravindraveendran-mpl/dependencyrepo --json conclusion --jq '.conclusion')
          echo "${mobile-league-ios-contract_run) completed with conclusion: $(mobile-league-ios-contract_run_conclusion)"
          if [ "$mobile-league-ios-contract_run_conclusion" != "success" ]; then
            echo "Workflow failed. Exiting..."
            exit 1
          fi

          mobile-league-ios-validic_run_id=${{ steps.mirror_mobile-league-ios-validic.outputs.run_id }}
          while [ "$(gh run view $mobile-league-ios-validic_run_id --repo aravindraveendran-mpl/dependencyrepo --json conclusion --jq '.conclusion')" == "null" ]; do
            echo "Waiting for workflow aravindraveendran-mpl/dependencyrepo to complete..."
            sleep 10
          done
          mobile-league-ios-validic_run_conclusion=$(gh run view $mobile-league-ios-validic_run_id --repo aravindraveendran-mpl/dependencyrepo --json conclusion --jq '.conclusion')
          echo "${mobile-league-ios-validic_run_id} completed with conclusion: $mobile-league-ios-contract_run_conclusion"
          if [ "$mobile-league-ios-validic_run_conclusion" != "success" ]; then
            echo "Waiting for workflow aravindraveendran-mpl/dependencyrepo to complete..."
            exit 1
          fi

